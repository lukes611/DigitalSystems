Luke's Assembly Language 2.0
LAL2.0


Memory:
Flip-Flops in CPU: a, b
SRAM: X * 16 bit memory (X is user defined)


			codes and operations
			
#				#blah blah			comment
func			func name			function naming
lda				lda x				load memory[x] into a
				lda vx				load value x into a
ldb				ldb x				load memory[x] into b
				ldb vx				load value b into b
ldafb			ldafb				load memory[b] into a
bisa			bisa				b = a
sta				sta x				store a in memory[x]
stb				stb x				store b in memory[x]
staib			staib				stora a in memory[b]
setim			setim				store a in image.data[b]
goto			goto n				set PC to n
goa				goa					set PC to a
ifa				ifa n				if a != 0, set PC to n
ifga			ifga x				if a != 0, set PC to memory[x]
ifan			ifan n				if a is 0, set PC to n
ifgan			ifgan x				if a is 0, set PC to memory[x]
altb			altb				if a < b -> a = 1, else a = 0
aeqb			aeqb				if a == b -> a = 1, else a = 0
agtb			agtb				if a > b -> a = 1, else a = 0
add				add					a = a+b
inca			inca				a = a+1
deca			deca				a = a-1
sub				sub					a = a-b
or				or					a = a|b
and				and					a = a&b
xor				xor					a = a^b
not				not					a = !a
shla			shla x				shift a left by x bits
shra			shra x				shift a right by x bits


Memory Function Mapper:
divider_Function (24,x) (25,y) (26,ans) (23,nextLocation)
getLUTVal (29,denominator) (28,output) (27,nextline)
multiplier (30,x) (31,y) (32,looper) (33,ans) (34,nextLocation)
absoluteVal (35,inp) (36,ans) (37,nextLocation)
maximumlVal (38,a) (39,b) (40,ans) (41,nextLocation)
divider_Function2 (42,x) (43,y) (44,ans) (45,nextLocation)
setPixelF (46,x) (47,y) (48,dval) (49,nextLocation)
logicalEnd (50:x) (51:xd) (52:y) (53:yd) (54:l1) (55:l2) (56:l3) (57:ans) (58:nextLocation)
lineDrawerLoopA (73:ox) (74:oy) (75:x) (76:y) (77:incx) (78:incy) (79:l1) 
(80:l2) (81:l3) (82:xd) (83:yd) (84:x1) (85:y1) (86:nextLocation)
lineDrawerFunctionPart1 (59:x1) (60:y1) (61:x2) (62:y2) (63:ox) (64:oy)
(xd:65) (yd:66) (absxd:67) (absyd:68) (maxd:69) (incx:70) (incy:71)
(72:nextlocation)

